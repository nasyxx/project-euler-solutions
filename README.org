#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Project Euler Solutions
#+DATE: <2019-01-18 Fri>
#+AUTHOR: Nasy
#+EMAIL: nasyxx@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 27.0.50 (Org mode 9.1.9)

* Prologue

Here are my code and solutions for Project Euler, along with my roughly
ideology.  Although some moments I realised some advanced strategy from others,
all the code here comes from me.

* Promblems

** Promblem 1 -- Multiples of 3 and 5

#+begin_quote
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

https://projecteuler.net/problem=1
#+end_quote

Exhaust the numbers and sum them.

#+begin_src haskell
  sum_multiples_3_5 :: Integral c => c -> c
  sum_multiples_3_5 n =
      sum . filter (\x -> x `mod` 3 == 0 || x `mod` 5 == 0) $ [1 .. n - 1]

  ans :: Integer
  ans = sum_multiples_3_5 1000
#+end_src
